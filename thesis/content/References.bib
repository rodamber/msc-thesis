% Encoding: UTF-8

@InProceedings{Alur:sygus:2013,
  author    = {Rajeev Alur and Rastislav Bodik and Garvit Juniwal and Milo M. K. Martin and Mukund Raghothaman and Sanjit A. Seshia and Rishabh Singh and Armando Solar-Lezama and Emina Torlak and Abhishek Udupa},
  title     = {Syntax-guided synthesis},
  booktitle = {2013 Formal Methods in Computer-Aided Design},
  year      = {2013},
  month     = {oct},
  publisher = {{IEEE}},
  doi       = {10.1109/fmcad.2013.6679385},
  file      = {:Alur_sygus_2013 - Syntax Guided Synthesis.pdf:PDF},
}

@Book{Biere:2009:HSV,
  title     = {{Handbook of Satisfiability: Volume 185 Frontiers in Artificial Intelligence and Applications}},
  publisher = {IOS Press},
  year      = {2009},
  author    = {Biere, A. and Heule, M. and van Maaren, H. and Walsh, T.},
  address   = {Amsterdam, The Netherlands, The Netherlands},
  isbn      = {1586039296, 9781586039295},
}

@InProceedings{Bornholt:2016:OSM,
  author    = {Bornholt, James and Torlak, Emina and Grossman, Dan and Ceze, Luis},
  title     = {{Optimizing Synthesis with Metasketches}},
  booktitle = {Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
  year      = {2016},
  series    = {POPL '16},
  pages     = {775--788},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {2837666},
  doi       = {10.1145/2837614.2837666},
  file      = {:Bornholt_2016_OSM - Optimizing Synthesis with Metasketches.pdf:PDF},
  isbn      = {978-1-4503-3549-2},
  keywords  = {Program synthesis},
  location  = {St. Petersburg, FL, USA},
  numpages  = {14},
  url       = {http://doi.acm.org/10.1145/2837614.2837666},
}

@Article{Cheung:2013,
  author     = {Cheung, Alvin and Solar-Lezama, Armando and Madden, Samuel},
  title      = {{Optimizing Database-backed Applications with Query Synthesis}},
  journal    = {SIGPLAN Not.},
  year       = {2013},
  volume     = {48},
  number     = {6},
  pages      = {3--14},
  month      = jun,
  issn       = {0362-1340},
  acmid      = {2462180},
  address    = {New York, NY, USA},
  doi        = {10.1145/2499370.2462180},
  file       = {\:Cheung_2013 - Optimizing Database Backed Applications with Query Synthesis.pdf\:PDF:\:Cheung_2013 - Optimizing Database Backed Applications with Query Synthesis.pdf\:PDF:PDF},
  issue_date = {June 2013},
  keywords   = {performance, program optimization, program synthesis},
  numpages   = {12},
  publisher  = {ACM},
}

@InProceedings{DeMoura:2008:ZES,
  author    = {De Moura, Leonardo and Bj{\o}rner, Nikolaj},
  title     = {{Z3: An Efficient SMT Solver}},
  booktitle = {Proceedings of the Theory and Practice of Software, 14th International Conference on Tools and Algorithms for the Construction and Analysis of Systems},
  year      = {2008},
  series    = {TACAS'08/ETAPS'08},
  pages     = {337--340},
  address   = {Berlin, Heidelberg},
  publisher = {Springer-Verlag},
  acmid     = {1792766},
  file      = {:DeMoura_2008_ZES - Z3_ an Efficient SMT Solver.pdf:PDF},
  isbn      = {3-540-78799-2, 978-3-540-78799-0},
  location  = {Budapest, Hungary},
  numpages  = {4},
  url       = {http://dl.acm.org/citation.cfm?id=1792734.1792766},
}

@InProceedings{Feng:2018:PSU,
  author    = {Feng, Yu and Martins, Ruben and Bastani, Osbert and Dillig, Isil},
  title     = {{Program Synthesis Using Conflict-driven Learning}},
  booktitle = {Proceedings of the 39th ACM SIGPLAN Conference on Programming Language Design and Implementation},
  year      = {2018},
  series    = {PLDI 2018},
  pages     = {420--435},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {3192382},
  doi       = {10.1145/3192366.3192382},
  file      = {:Feng_2018_PSU - Program Synthesis Using Conflict Driven Learning.pdf:PDF},
  isbn      = {978-1-4503-5698-5},
  keywords  = {automated reasoning, conflict-driven learning, program synthesis},
  location  = {Philadelphia, PA, USA},
  numpages  = {16},
  url       = {http://doi.acm.org/10.1145/3192366.3192382},
}

@InProceedings{Feng:2017:CST,
  author    = {Feng, Yu and Martins, Ruben and Van Geffen, Jacob and Dillig, Isil and Chaudhuri, Swarat},
  title     = {{Component-based Synthesis of Table Consolidation and Transformation Tasks from Examples}},
  booktitle = {Proceedings of the 38th ACM SIGPLAN Conference on Programming Language Design and Implementation},
  year      = {2017},
  series    = {PLDI 2017},
  pages     = {422--436},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {3062351},
  doi       = {10.1145/3062341.3062351},
  file      = {:Feng_2017_CST - Component Based Synthesis of Table Consolidation and Transformation Tasks from Examples.pdf:PDF},
  isbn      = {978-1-4503-4988-8},
  keywords  = {Component-based synthesis, Data preparation, Program synthesis, Programming by example, SMT-based deduction},
  location  = {Barcelona, Spain},
  numpages  = {15},
  url       = {http://doi.acm.org/10.1145/3062341.3062351},
}

@InProceedings{Feng:2017:CSC,
  author    = {Feng, Yu and Martins, Ruben and Wang, Yuepeng and Dillig, Isil and Reps, Thomas W.},
  title     = {{Component-based Synthesis for Complex APIs}},
  booktitle = {Proceedings of the 44th ACM SIGPLAN Symposium on Principles of Programming Languages},
  year      = {2017},
  series    = {POPL 2017},
  pages     = {599--612},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {3009851},
  doi       = {10.1145/3009837.3009851},
  file      = {:Feng_2017_CSC - Component Based Synthesis for Complex APIs.pdf:PDF},
  isbn      = {978-1-4503-4660-3},
  keywords  = {Component-based, Petri-net, Program Synthesis, Type-directed},
  location  = {Paris, France},
  numpages  = {14},
  url       = {http://doi.acm.org/10.1145/3009837.3009851},
}

@InProceedings{Frankle:2016:EST,
  author    = {Frankle, Jonathan and Osera, Peter-Michael and Walker, David and Zdancewic, Steve},
  title     = {{Example-directed Synthesis: A Type-theoretic Interpretation}},
  booktitle = {Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
  year      = {2016},
  series    = {POPL '16},
  pages     = {802--815},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {2837629},
  doi       = {10.1145/2837614.2837629},
  file      = {:Frankle_2016_EST - Example Directed Synthesis_ a Type Theoretic Interpretation.pdf:PDF},
  isbn      = {978-1-4503-3549-2},
  keywords  = {Functional Programming, Program Synthesis, Proof Search, Refinement Types, Sequent Calculus, Type Theory},
  location  = {St. Petersburg, FL, USA},
  numpages  = {14},
  url       = {http://doi.acm.org/10.1145/2837614.2837629},
}

@InProceedings{Green:1969:ATP,
  author    = {Green, Cordell},
  title     = {{Application of Theorem Proving to Problem Solving}},
  booktitle = {Proceedings of the 1st International Joint Conference on Artificial Intelligence},
  year      = {1969},
  series    = {IJCAI'69},
  pages     = {219--239},
  address   = {San Francisco, CA, USA},
  publisher = {Morgan Kaufmann Publishers Inc.},
  acmid     = {1624585},
  file      = {:Green_1969_ATP - Application of Theorem Proving to Problem Solving.pdf:PDF},
  keywords  = {automatic programming, problem solving, program writing, question answering, resolution, robots, state transformations, theorem proving},
  location  = {Washington, DC},
  numpages  = {21},
  url       = {http://dl.acm.org/citation.cfm?id=1624562.1624585},
}

@InProceedings{Gulwani:2011,
  author    = {Gulwani, Sumit},
  title     = {{Automating String Processing in Spreadsheets Using Input-output Examples}},
  booktitle = {Proceedings of the 38th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
  year      = {2011},
  series    = {POPL '11},
  pages     = {317--330},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {1926423},
  doi       = {10.1145/1926385.1926423},
  file      = {:Gulwani_2011 - Automating String Processing in Spreadsheets Using Input-Output Examples.pdf:PDF},
  isbn      = {978-1-4503-0490-0},
  keywords  = {program synthesis, programming by example (pbe), spreadsheet programming, string manipulation, user intent, version space algebra},
  location  = {Austin, Texas, USA},
  numpages  = {14},
}

@Article{Gulwani:2012:SDM,
  author     = {Gulwani, Sumit and Harris, William R. and Singh, Rishabh},
  title      = {{Spreadsheet Data Manipulation Using Examples}},
  journal    = {Communications of the ACM},
  year       = {2012},
  volume     = {55},
  number     = {8},
  pages      = {97--105},
  month      = aug,
  issn       = {0001-0782},
  acmid      = {2240260},
  address    = {New York, NY, USA},
  doi        = {10.1145/2240236.2240260},
  file       = {:Gulwani_2012_SDM - Spreadsheet Data Manipulation Using Examples.pdf:PDF},
  issue_date = {August 2012},
  numpages   = {9},
  publisher  = {ACM},
  url        = {http://doi.acm.org/10.1145/2240236.2240260},
}

@InProceedings{Gulwani:2011:SLP,
  author    = {Gulwani, Sumit and Jha, Susmit and Tiwari, Ashish and Venkatesan, Ramarathnam},
  title     = {{Synthesis of Loop-free Programs}},
  booktitle = {Proceedings of the 32Nd ACM SIGPLAN Conference on Programming Language Design and Implementation},
  year      = {2011},
  series    = {PLDI '11},
  pages     = {62--73},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {1993506},
  doi       = {10.1145/1993498.1993506},
  file      = {:Gulwani_2011_SLP - Synthesis of Loop Free Programs.pdf:PDF},
  isbn      = {978-1-4503-0663-8},
  keywords  = {component-based synthesis, program synthesis, smt},
  location  = {San Jose, California, USA},
  numpages  = {12},
  url       = {http://doi.acm.org/10.1145/1993498.1993506},
}

@Article{Gulwani2017,
  author   = {Sumit Gulwani and Oleksandr Polozov and Rishabh Singh},
  title    = {{Program Synthesis}},
  journal  = {Foundations and TrendsÂ® in Programming Languages},
  year     = {2017},
  volume   = {4},
  number   = {1-2},
  pages    = {1-119},
  issn     = {2325-1107},
  doi      = {10.1561/2500000010},
  file     = {:Gulwani2017 - Program Synthesis.pdf:PDF},
  keywords = {rank5},
}

@Article{Itzhaky:SIS:2010,
  author     = {Itzhaky, Shachar and Gulwani, Sumit and Immerman, Neil and Sagiv, Mooly},
  title      = {{A Simple Inductive Synthesis Methodology and Its Applications}},
  journal    = {SIGPLAN Not.},
  year       = {2010},
  volume     = {45},
  number     = {10},
  pages      = {36--46},
  month      = oct,
  issn       = {0362-1340},
  acmid      = {1869463},
  address    = {New York, NY, USA},
  doi        = {10.1145/1932682.1869463},
  file       = {:Itzhaky_SIS_2010 - A Simple Inductive Synthesis Methodology and Its Applications.pdf:PDF},
  issue_date = {October 2010},
  keywords   = {finite differencing, high-level program, inductive synthesis, transformational programming},
  numpages   = {11},
  publisher  = {ACM},
  url        = {http://doi.acm.org/10.1145/1932682.1869463},
}

@Article{Jha:oracle:2010,
  author  = {Jha, Susmit and Gulwani, Sumit and Seshia, Sanjit A. and Tiwari, Ashish},
  title   = {{Oracle-guided component-based program synthesis}},
  journal = {Proceedings of the 32nd ACM/IEEE International Conference on Software Engineering - ICSE '10},
  year    = {2010},
  volume  = {1},
  pages   = {215},
  issn    = {0270-5257},
  doi     = {10.1145/1806799.1806833},
  file    = {:Jha_oracle_2010 - Oracle Guided Component Based Program Synthesis.pdf:PDF},
  isbn    = {9781605587196},
  url     = {http://portal.acm.org/citation.cfm?doid =1806799.1806833},
}

@Article{Jha:2017:TFS,
  author     = {Jha, Susmit and Seshia, Sanjit A.},
  title      = {{A Theory of Formal Synthesis via Inductive Learning}},
  journal    = {Acta Inf.},
  year       = {2017},
  volume     = {54},
  number     = {7},
  pages      = {693--726},
  month      = nov,
  issn       = {0001-5903},
  acmid      = {3155994},
  address    = {Secaucus, NJ, USA},
  doi        = {10.1007/s00236-017-0294-5},
  file       = {:Jha_2017_TFS - A Theory of Formal Synthesis Via Inductive Learning.pdf:PDF},
  issue_date = {November 2017},
  numpages   = {34},
  publisher  = {Springer-Verlag New York, Inc.},
  url        = {https://doi.org/10.1007/s00236-017-0294-5},
}

@Article{Lau:2000,
  author  = {Lau, Tessa and Domingos, Pedro and Weld, Daniel S},
  title   = {{Version Space Algebra and its Application to Programming by Demonstration}},
  journal = {Icml},
  year    = {2000},
  pages   = {527--534},
  file    = {:Lau_2000 - Version Space Algebra and Its Application to Programming by Demonstration.pdf:PDF},
  isbn    = {1-55860-707-2},
}

@InProceedings{Lau:traces:2003,
  author    = {Lau, Tessa and Domingos, Pedro and Weld, Daniel S.},
  title     = {{Learning Programs from Traces Using Version Space Algebra}},
  booktitle = {Proceedings of the 2d International Conference on Knowledge Capture},
  year      = {2003},
  series    = {K-CAP '03},
  pages     = {36--43},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {945654},
  doi       = {10.1145/945645.945654},
  file      = {:Lau_traces_2003 - Learning Programs from Traces Using Version Space Algebra.pdf:PDF},
  isbn      = {1-58113-583-1},
  location  = {Sanibel Island, FL, USA},
  numpages  = {8},
  pdf       = {:Lau_traces_2003 - Learning Programs from Traces Using Version Space Algebra.pdf:PDF},
}

@Article{Lau2003,
  author   = {Lau, Tessa and Wolfman, Steven A. and Domingos, Pedro and Weld, Daniel S.},
  title    = {{Programming by Demonstration Using Version Space Algebra}},
  journal  = {Machine Learning},
  year     = {2003},
  volume   = {53},
  number   = {1},
  pages    = {111--156},
  month    = {Oct},
  issn     = {1573-0565},
  abstract = {Programming by demonstration enables users to easily personalize their applications, automating repetitive tasks simply by executing a few examples. We formalize programming by demonstration as a machine learning problem: given the changes in the application state that result from the user's demonstrated actions, learn the general program that maps from one application state to the next. We present a methodology for learning in this space of complex functions. First we extend version spaces to learn arbitrary functions, not just concepts. Then we introduce the version space algebra, a method for composing simpler version spaces to construct more complex spaces. Finally, we apply our version space algebra to the text-editing domain and describe an implemented system called SMARTedit that learns repetitive text-editing procedures by example. We evaluate our approach by measuring the number of examples required for the system to learn a procedure thatworks on the remainder of examples, and by an informal user study measuring the effort users spend using our system versus performing the task by hand. The results show that SMARTedit is capable of generalizing correctly from as few as one or two examples, and that users generally save a significant amount of effort when completing tasks with SMARTedit's help.},
  day      = {01},
  doi      = {10.1023/A:1025671410623},
  file     = {:Lau2003 - Programming by Demonstration Using Version Space Algebra.pdf:PDF},
  url      = {https://doi.org/10.1023/A:1025671410623},
}

@Article{Le:2014,
  author     = {Le, Vu and Gulwani, Sumit},
  title      = {{FlashExtract: A Framework for Data Extraction by Examples}},
  journal    = {SIGPLAN Not.},
  year       = {2014},
  volume     = {49},
  number     = {6},
  pages      = {542--553},
  month      = jun,
  issn       = {0362-1340},
  acmid      = {2594333},
  address    = {New York, NY, USA},
  doi        = {10.1145/2666356.2594333},
  file       = {:Le_2014 - FlashExtract_ a Framework for Data Extraction by Examples.pdf:PDF},
  issue_date = {June 2014},
  keywords   = {end-user programming, program synthesis, programming by examples},
  numpages   = {12},
  publisher  = {ACM},
  url        = {http://doi.acm.org/10.1145/2666356.2594333},
}

@InProceedings{Lee:ASP:2018,
  author    = {Lee, Woosuk and Heo, Kihong and Alur, Rajeev and Naik, Mayur},
  title     = {{Accelerating Search-based Program Synthesis Using Learned Probabilistic Models}},
  booktitle = {Proceedings of the 39th ACM SIGPLAN Conference on Programming Language Design and Implementation},
  year      = {2018},
  series    = {PLDI 2018},
  pages     = {436--449},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {3192410},
  doi       = {10.1145/3192366.3192410},
  file      = {:Lee_ASP_2018 - Accelerating Search Based Program Synthesis Using Learned Probabilistic Models.pdf:PDF},
  isbn      = {978-1-4503-5698-5},
  keywords  = {Domain-specific languages, Statistical methods, Synthesis, Transfer learning},
  location  = {Philadelphia, PA, USA},
  numpages  = {14},
  url       = {http://doi.acm.org/10.1145/3192366.3192410},
}

@InProceedings{Leung:2015:IPS,
  author    = {Leung, Alan and Sarracino, John and Lerner, Sorin},
  title     = {{Interactive Parser Synthesis by Example}},
  booktitle = {Proceedings of the 36th ACM SIGPLAN Conference on Programming Language Design and Implementation},
  year      = {2015},
  series    = {PLDI '15},
  pages     = {565--574},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {2738002},
  doi       = {10.1145/2737924.2738002},
  file      = {:Leung_2015_IPS - Interactive Parser Synthesis by Example.pdf:PDF},
  isbn      = {978-1-4503-3468-6},
  keywords  = {Parsing, Program Synthesis, Programming by Example},
  location  = {Portland, OR, USA},
  numpages  = {10},
  url       = {http://doi.acm.org/10.1145/2737924.2738002},
}

@Article{Manna:1971:TAP,
  author     = {Manna, Zohar and Waldinger, Richard J.},
  title      = {{Toward Automatic Program Synthesis}},
  journal    = {Communications of the ACM},
  year       = {1971},
  volume     = {14},
  number     = {3},
  pages      = {151--165},
  month      = mar,
  issn       = {0001-0782},
  acmid      = {362568},
  address    = {New York, NY, USA},
  doi        = {10.1145/362566.362568},
  file       = {:Manna_1971_TAP - Toward Automatic Program Synthesis.pdf:PDF},
  issue_date = {March 1971},
  keywords   = {answer extraction, artificial intelligence, automatic program synthesis, mathematical induction principle, problem solving, theorem proving},
  numpages   = {15},
  publisher  = {ACM},
  url        = {http://doi.acm.org/10.1145/362566.362568},
}

@InProceedings{Osera:2015:TPS,
  author    = {Osera, Peter-Michael and Zdancewic, Steve},
  title     = {{Type-and-example-directed Program Synthesis}},
  booktitle = {Proceedings of the 36th ACM SIGPLAN Conference on Programming Language Design and Implementation},
  year      = {2015},
  series    = {PLDI '15},
  pages     = {619--630},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {2738007},
  doi       = {10.1145/2737924.2738007},
  file      = {:Osera_2015_TPS - Type and Example Directed Program Synthesis.pdf:PDF},
  isbn      = {978-1-4503-3468-6},
  keywords  = {Functional Programming, Program Syn- thesis, Proof Search, Type Theory},
  location  = {Portland, OR, USA},
  numpages  = {12},
  url       = {http://doi.acm.org/10.1145/2737924.2738007},
}

@InProceedings{Peleg:2018:AIS,
  author    = {Peleg, Hila and Itzhaky, Shachar and Shoham, Sharon},
  title     = {{Abstraction-Based Interaction Model for Synthesis}},
  booktitle = {Verification, Model Checking, and Abstract Interpretation},
  year      = {2018},
  editor    = {Dillig, Isil and Palsberg, Jens},
  pages     = {382--405},
  address   = {Cham},
  publisher = {Springer International Publishing},
  abstract  = {Program synthesis is the problem of computing from a specification a program that implements it. New and popular variations on the synthesis problem accept specifications in formats that are easier for the human synthesis user to provide: input-output example pairs, type information, and partial logical specifications. These are all partial specification formats, encoding only a fraction of the expected behavior of the program, leaving many matching programs. This transition into partial specification also changes the mode of work for the user, who now provides additional specifications as long as they are unhappy with the result. This turns synthesis into an iterative, interactive process.},
  file      = {:Peleg_2018_AIS - Abstraction Based Interaction Model for Synthesis.pdf:PDF},
  isbn      = {978-3-319-73721-8},
}

@InProceedings{Phothilimthana:2016:SUS,
  author    = {Phothilimthana, Phitchaya Mangpo and Thakur, Aditya and Bodik, Rastislav and Dhurjati, Dinakar},
  title     = {{Scaling Up Superoptimization}},
  booktitle = {Proceedings of the Twenty-First International Conference on Architectural Support for Programming Languages and Operating Systems},
  year      = {2016},
  series    = {ASPLOS '16},
  pages     = {297--310},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {2872387},
  doi       = {10.1145/2872362.2872387},
  file      = {:Phothilimthana_2016_SUS - Scaling up Superoptimization.pdf:PDF},
  isbn      = {978-1-4503-4091-5},
  keywords  = {SMT, program synthesis, superoptimization},
  location  = {Atlanta, Georgia, USA},
  numpages  = {14},
  url       = {http://doi.acm.org/10.1145/2872362.2872387},
}

@InProceedings{Polikarpova:2016:PSP,
  author    = {Polikarpova, Nadia and Kuraj, Ivan and Solar-Lezama, Armando},
  title     = {{Program Synthesis from Polymorphic Refinement Types}},
  booktitle = {Proceedings of the 37th ACM SIGPLAN Conference on Programming Language Design and Implementation},
  year      = {2016},
  series    = {PLDI '16},
  pages     = {522--538},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {2908093},
  doi       = {10.1145/2908080.2908093},
  file      = {:Polikarpova_2016_PSP - Program Synthesis from Polymorphic Refinement Types.pdf:PDF},
  isbn      = {978-1-4503-4261-2},
  keywords  = {Functional Programming, Predicate Abstraction, Program Synthesis, Refinement Types},
  location  = {Santa Barbara, CA, USA},
  numpages  = {17},
  url       = {http://doi.acm.org/10.1145/2908080.2908093},
}

@Article{Polikarpova:2019:SSH,
  author     = {Polikarpova, Nadia and Sergey, Ilya},
  title      = {{Structuring the Synthesis of Heap-manipulating Programs}},
  journal    = {Proc. ACM Program. Lang.},
  year       = {2019},
  volume     = {3},
  number     = {POPL},
  pages      = {72:1--72:30},
  month      = jan,
  issn       = {2475-1421},
  acmid      = {3290385},
  address    = {New York, NY, USA},
  articleno  = {72},
  doi        = {10.1145/3290385},
  file       = {:Polikarpova_2019_SSH - Structuring the Synthesis of Heap Manipulating Programs.pdf:PDF},
  issue_date = {January 2019},
  keywords   = {Program Synthesis, Proof Systems, Separation Logic, Type Theory},
  numpages   = {30},
  publisher  = {ACM},
  url        = {http://doi.acm.org/10.1145/3290385},
}

@InProceedings{Polozov:2015:FFI,
  author    = {Polozov, Oleksandr and Gulwani, Sumit},
  title     = {{FlashMeta: A Framework for Inductive Program Synthesis}},
  booktitle = {Proceedings of the 2015 ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications},
  year      = {2015},
  series    = {OOPSLA 2015},
  pages     = {107--126},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {2814310},
  doi       = {10.1145/2814270.2814310},
  file      = {:Polozov_2015_FFI - FlashMeta_ a Framework for Inductive Program Synthesis.pdf:PDF},
  isbn      = {978-1-4503-3689-5},
  keywords  = {Inductive program synthesis, deductive inference, domain-specific languages, frameworks, programming by examples, search-based synthesis},
  location  = {Pittsburgh, PA, USA},
  numpages  = {20},
  url       = {http://doi.acm.org/10.1145/2814270.2814310},
}

@InProceedings{Schkufza:2013:SS,
  author    = {Schkufza, Eric and Sharma, Rahul and Aiken, Alex},
  title     = {{Stochastic Superoptimization}},
  booktitle = {Proceedings of the Eighteenth International Conference on Architectural Support for Programming Languages and Operating Systems},
  year      = {2013},
  series    = {ASPLOS '13},
  pages     = {305--316},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {2451150},
  doi       = {10.1145/2451116.2451150},
  file      = {:Schkufza_2013_SS - Stochastic Superoptimization.pdf:PDF},
  isbn      = {978-1-4503-1870-9},
  keywords  = {64-bit, binary, markov chain monte carlo, mcmc, smt, stochastic search, superoptimization, x86, x86-64},
  location  = {Houston, Texas, USA},
  numpages  = {12},
  url       = {http://doi.acm.org/10.1145/2451116.2451150},
}

@Article{Shi:2019:FCS,
  author     = {Shi, Kensen and Steinhardt, Jacob and Liang, Percy},
  title      = {{FrAngel: Component-based Synthesis with Control Structures}},
  journal    = {Proc. ACM Program. Lang.},
  year       = {2019},
  volume     = {3},
  number     = {POPL},
  pages      = {73:1--73:29},
  month      = jan,
  issn       = {2475-1421},
  acmid      = {3290386},
  address    = {New York, NY, USA},
  articleno  = {73},
  doi        = {10.1145/3290386},
  file       = {:Shi_2019_FCS - FrAngel_ Component Based Synthesis with Control Structures.pdf:PDF},
  issue_date = {January 2019},
  keywords   = {angelic execution, component-based synthesis, control structures, program synthesis},
  numpages   = {29},
  publisher  = {ACM},
  url        = {http://doi.acm.org/10.1145/3290386},
}

@Article{Singh:ranking:2015,
  author    = {Singh, Rishabh and Gulwani, Sumit},
  title     = {{Predicting a Correct Program in Programming by Example}},
  year      = {2015},
  doi       = {10.1007/978-3-319-21690-4},
  editor    = {Daniel Kroening and Corina S. P{\u{a}}s{\u{a}}reanu},
  file      = {:Singh_ranking_2015 - Predicting a Correct Program in Programming by Example.pdf:PDF},
  publisher = {Springer International Publishing},
  url       = {https://www.microsoft.com/en-us/research/wp-content/uploads/2016/06/cav15-1.pdf},
}

@PhdThesis{Solar-Lezama:2008,
  author    = {Solar-Lezama, Armando},
  title     = {{Program Synthesis by Sketching}},
  year      = {2008},
  address   = {Berkeley, CA, USA},
  note      = {AAI3353225},
  advisor   = {Bodik, Rastislav},
  file      = {:/Users/rodamber/Sync/Partilhas/initial-papers/08-Program Synthesis by Sketching.pdf:PDF},
  isbn      = {978-1-109-09745-0},
  publisher = {University of California at Berkeley},
}

@InProceedings{Srivastava:2011:PIS,
  author    = {Srivastava, Saurabh and Gulwani, Sumit and Chaudhuri, Swarat and Foster, Jeffrey S.},
  title     = {{Path-based Inductive Synthesis for Program Inversion}},
  booktitle = {Proceedings of the 32Nd ACM SIGPLAN Conference on Programming Language Design and Implementation},
  year      = {2011},
  series    = {PLDI '11},
  pages     = {492--503},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {1993557},
  doi       = {10.1145/1993498.1993557},
  file      = {:Srivastava_2011_PIS - Path Based Inductive Synthesis for Program Inversion.pdf:PDF},
  isbn      = {978-1-4503-0663-8},
  keywords  = {inductive synthesis, pins, program inversion, symbolic execution, testing-inspired synthesis},
  location  = {San Jose, California, USA},
  numpages  = {12},
  url       = {http://doi.acm.org/10.1145/1993498.1993557},
}

@InProceedings{Srivastava:2010:PVP,
  author    = {Srivastava, Saurabh and Gulwani, Sumit and Foster, Jeffrey S.},
  title     = {{From Program Verification to Program Synthesis}},
  booktitle = {Proceedings of the 37th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
  year      = {2010},
  series    = {POPL '10},
  pages     = {313--326},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {1706337},
  doi       = {10.1145/1706299.1706337},
  file      = {:Srivastava_2010_PVP - From Program Verification to Program Synthesis.pdf:PDF},
  isbn      = {978-1-60558-479-9},
  keywords  = {proof-theoretic program synthesis, verification},
  location  = {Madrid, Spain},
  numpages  = {14},
  url       = {http://doi.acm.org/10.1145/1706299.1706337},
}

@Article{Srivastava:2012,
  author    = {Srivastava, Saurabh and Gulwani, Sumit and Foster, Jerey S.},
  title     = {{Template-Based Program Verification and Program Synthesis}},
  journal   = {International Journal on Software Tools for Technology Transfer},
  year      = {2012},
  volume    = {15},
  number    = {5},
  pages     = {497-518},
  month     = {January},
  edition   = {International Journal on Software Tools for Technology Transfer},
  file      = {:Srivastava_2012 - Template Based Program Verification and Program Synthesis.pdf:PDF},
  publisher = {Springer Berlin Heidelberg},
  url       = {https://www.microsoft.com/en-us/research/publication/template-based-program-verification-program-synthesis/},
}

@InProceedings{Torlak:2013:GSL,
  author    = {Torlak, Emina and Bodik, Rastislav},
  title     = {{Growing Solver-aided Languages with Rosette}},
  booktitle = {Proceedings of the 2013 ACM International Symposium on New Ideas, New Paradigms, and Reflections on Programming \& Software},
  year      = {2013},
  series    = {Onward! 2013},
  pages     = {135--152},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {2509586},
  doi       = {10.1145/2509578.2509586},
  file      = {:Torlak_2013_GSL - Growing Solver Aided Languages with Rosette.pdf:PDF},
  isbn      = {978-1-4503-2472-4},
  keywords  = {solver-aided languages},
  location  = {Indianapolis, Indiana, USA},
  numpages  = {18},
  url       = {http://doi.acm.org/10.1145/2509578.2509586},
}

@InProceedings{Smten,
  author    = {Uhler, Richard and Dave, Nirav},
  title     = {{Smten: Automatic Translation of High-Level Symbolic Computations into SMT Queries}},
  booktitle = {Computer Aided Verification},
  year      = {2013},
  editor    = {Sharygina, Natasha and Veith, Helmut},
  pages     = {678--683},
  address   = {Berlin, Heidelberg},
  publisher = {Springer Berlin Heidelberg},
  abstract  = {Development of computer aided verification tools has greatly benefited from SMT technologies; instead of writing an ad-hoc reasoning engine, designers translate their problem into SMT queries which solvers can efficiently solve. Translating a problem into effective SMT queries, however, is itself a tedious, error-prone, and non-trivial task. This paper introduces Smten, a tool for automatically translating high-level symbolic computations into SMT queries. We demonstrate the use of Smten in the development of an SMT-based string constraint solver.},
  file      = {:Smten - Smten_ Automatic Translation of High Level Symbolic Computations into SMT Queries.pdf:PDF},
  isbn      = {978-3-642-39799-8},
}

@Comment{jabref-meta: databaseType:bibtex;}

@Comment{jabref-meta: fileDirectory:/Users/rodamber/Sync/Biblioteca/Tese;}

@Comment{jabref-meta: fileDirectory-rodamber-Rodrigos-MacBook-Pro.local:/Users/rodamber/Sync/Biblioteca/Tese;}

@Comment{jabref-meta: saveOrderConfig:specified;author;false;year;false;title;false;}
