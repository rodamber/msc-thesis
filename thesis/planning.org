* Thesis
** REVIEW Introduction
:PROPERTIES:
:CONTENT:  REVIEW
:EXAMPLES: REVIEW
:RELWORK:  REVIEW
:END:

This chapter should:

- [X] open the thesis with a page or two that sells the work to a general audience
(e.g., a science reporter);
- tie the work together and highlight the novel contributions;
- advertise the organization of the rest of the document.

- [ ] There should be a bridge to constraint solving. Right now it appears out
  of nowhere in the preliminaries.
$\exists P \ldotp \phi(P) $
Synthesis as a next-step from verification:
 - \phi{}(input, program, output)
   - fix program and input: interpretation
   - fix program and output: reverse interpretation
   - fix program: verification
   - fix input and output: synthesis

- How does PBE compare to other kinds of automatic programming? In
particular, how does it compare to Machine Learning?

Compromise:
- reducing the scope or domain of application
- make the synthesizers domain-specific and less general (embed the insights
  directly into the synthesizers)

Solutions are:
- solver-aided programming: human provides high-level insights while the
synthesizer takes care of the low-level details.
- human-computer working together (interaction through active learning)

Automating this work is good because:
- code is correct by construction

- sintetizadores altamente especializados e calibrados para dominios particulares
- bugs enviados para a camada de abstraccao acima

** REVIEW Preliminaries
:PROPERTIES:
:CONTENT:  REVIEW
:EXAMPLES: REVIEW
:RELWORK:  REVIEW
:END:

- Some background on how SMT solvers work, e.g., describe DPLL(T).

** REVIEW Background
  DEADLINE: <2019-03-13 Wed>
:PROPERTIES:
:CONTENT:  REVIEW
:EXAMPLES: REVIEW
:RELWORK:  REVIEW
:END:

- [ ] Synthesis of string-manipulating program
- [ ] Missing an explanation of why the search space is big

*** REVIEW Specifications
:PROPERTIES:
:CONTENT:  REVIEW
:EXAMPLES: REVIEW
:RELWORK:  REVIEW
:END:

**** REVIEW Logical Specifications
:PROPERTIES:
:CONTENT:  REVIEW
:EXAMPLES: REVIEW
:RELWORK:  REVIEW
:END:

Missing reference.

***** [Ideas]
Add an example. Ideas:
- Leon
- POPL'19 Polikarpova, swap. This one is good because it can serve as an example
  for the subsection on deductive synthesis.

**** REVIEW Syntactic Specifications
:PROPERTIES:
:CONTENT:  REVIEW
:EXAMPLES: REVIEW
:RELWORK:  REVIEW
:END:

***** TODO Sketching
      :PROPERTIES:
      :CONTENT:  REVIEW
      :EXAMPLES: REVIEW
      :RELWORK:  REVIEW
      :END:

Missing example.

***** TODO Component-Based Synthesis
      :PROPERTIES:
      :CONTENT:  REVIEW
      :EXAMPLES: REVIEW
      :RELWORK:  REVIEW
      :END:

Missing example. Ideas:
- SyPet
- FrAngel: Also, it adds control structures to the problem

***** TODO Syntax-Guided Synthesis
      :PROPERTIES:
      :CONTENT:  REVIEW
      :EXAMPLES: REVIEW
      :RELWORK:  REVIEW
      :END:

Missing example.

**** REVIEW Inductive Synthesis
:PROPERTIES:
:CONTENT:  REVIEW
:EXAMPLES: REVIEW
:RELWORK:  REVIEW
:END:

***** TODO Programming By Examples
:PROPERTIES:
:CONTENT:  REVIEW
:EXAMPLES: REVIEW
:RELWORK:  REVIEW
:END:

- Missing references
- Missing example

***** TODO Programming By Demonstration
:PROPERTIES:
:CONTENT:  REVIEW
:EXAMPLES: REVIEW
:RELWORK:  REVIEW
:END:

- Maybe check if there's some Gulwani paper to put here.

**** REVIEW Programs
:PROPERTIES:
:CONTENT:  REVIEW
:EXAMPLES: REVIEW
:RELWORK:  REVIEW
:END:

Missing example (take one from the papers).

*** REVIEW Search Techniques
:PROPERTIES:
:CONTENT:  REVIEW
:EXAMPLES: REVIEW
:RELWORK:  REVIEW
:END:

**** TODO Deductive Search
:PROPERTIES:
:CONTENT:  REVIEW
:EXAMPLES: REVIEW
:RELWORK:  REVIEW
:END:

Expand on this.
Commented out because it is too simple.

References: Polikarpova:2019:SSH, Manna:1971:TAP, Green:1969:ATP

**** TODO Representation-Based Search
:PROPERTIES:
:CONTENT:  REVIEW
:EXAMPLES: REVIEW
:RELWORK:  REVIEW
:END:
- VSAs: motivated by inductive learning; particularly suited to pbe
  - put simply, just a DAG where every part corresponds to a valid program
  - supports learn, intersect and pick
  - encodes a possibly exponential number of programs
- Finite tree automata


**** REVIEW Enumerative Search
:PROPERTIES:
:CONTENT:  REVIEW
:EXAMPLES: REVIEW
:RELWORK:  REVIEW
:END:

***** Top-Down Tree Search
:PROPERTIES:
:CONTENT:  REVIEW
:EXAMPLES: REVIEW
:RELWORK:  REVIEW
:END:

Adicionar ref. ao facto de que estes algoritmos geralmente consideram o tamanho
das expressões que estão a gerar. Ver a overview do Gulwani. Sem dizer isso, a
descrição fica algo inconsistente com os dois algoritmos que vem a seguir.

Adicionar (possivelmente) um exemplo de um traço de execução do algoritmo.

***** Bottom-Up Tree Search
:PROPERTIES:
:CONTENT:  REVIEW
:EXAMPLES: REVIEW
:RELWORK:  REVIEW
:END:

Check out references [4, 141] of Gulwani2017.

This algorithm is shown in Figure \fixme{???}{ainda tenho que produzir esta
figura}, using program size as the metric of program complexity.

***** Bidirectional Tree Search
:PROPERTIES:
:CONTENT:  REVIEW
:EXAMPLES: REVIEW
:RELWORK:  REVIEW
:END:

Missing pseudocode.

**** REVIEW Stochastic Search
:PROPERTIES:
:CONTENT:  REVIEW
:EXAMPLES: REVIEW
:RELWORK:  REVIEW
:END:

***** Sampling the Search Space
:PROPERTIES:
:CONTENT:  REVIEW
:EXAMPLES: REVIEW
:RELWORK:  REVIEW
:END:

**** REVIEW Constraint Solving
:PROPERTIES:
:CONTENT:  REVIEW
:EXAMPLES: REVIEW
:RELWORK:  REVIEW
:END:
**** REVIEW Oracle-Guided Inductive Synthesis
:PROPERTIES:
:CONTENT:  REVIEW
:EXAMPLES: REVIEW
:RELWORK:  REVIEW
:END:

** ONGOING Synthesis
:PROPERTIES:
:CONTENT:  REVIEW
:EXAMPLES: REVIEW
:RELWORK:  REVIEW
:END:

Check Brahma's contributions/limitations on Nadia's lecture 07 (page 17).

- [ ] Explain that both encodings are independent of the components used as long
  as they can be specified in SMT

- [ ] Comparison to Jha's et al. approach:
  - [ ] We use a lot more components.
  - [ ] More than just one type. Also, larger search space with strings that
    with bitvectors.
  - [ ] We synthesize arbitrary constants that are not given as user input.
  - [ ] Their program must use all components from the library exactly once.
  - [ ] Our components are more complex.
  - [ ] We prevent the addition of dead-code by asserting that every variable
    should be used at least once.

- [ ] Why does a component-based approach lend itself well? (direct mapping
  between components and DSL constructs; compare this with FlashFill's
  approach).

*** ONGOING Problem Description
:PROPERTIES:
:CONTENT:  REVIEW
:EXAMPLES: REVIEW
:RELWORK:  REVIEW
:END:

- [ ] Mention that we are using _positive_ examples.
- [ ] Note that examples show constants that are not part of the input.

*** ONGOING Setwise Encoding
:PROPERTIES:
:CONTENT:  REVIEW
:EXAMPLES: REVIEW
:RELWORK:  REVIEW
:END:

- [ ] Synthesizer program listing

**** Program Formula
:PROPERTIES:
:CONTENT:  REVIEW
:EXAMPLES: REVIEW
:RELWORK:  REVIEW
:END:

*** ONGOING Whole Encoding
:PROPERTIES:
:CONTENT:  REVIEW
:EXAMPLES: REVIEW
:RELWORK:  REVIEW
:END:

** REVIEW Experimental Results
:PROPERTIES:
:CONTENT:  REVIEW
:EXAMPLES: REVIEW
:RELWORK:  REVIEW
:END:

- Why did we choose SyPet? There is Brahma, Blaze, FlashFill, ...
- Missing computer specifications.

*** REVIEW Benchmark Description
*** REVIEW Results
*** REVIEW Discussion
- [ ] For one example, without a ranking function for programs, the synthesizers
  returns overfitted programs
  - far fetched constants and "identity components" make everything possible
  - tricks like (Length(''), or Concat(''), etc)
  - a common theme is to combine Length and Substr plus a string constant
    containing the expected output prefixed by garbage with the length of the
    input: Substr(c0, Length(x0), Length(x0))

- [ ] Need to apply restrictions:
  - on the domain of constants: constants should not contain the output
  - on the domain of formal param,ters: index arguments to substr should
    not be the same, concat should not be applied to the empty string, length
    with constants, etc

- [X] would be interesting to check the configurations for Setwise and Whole
  where constants are provided by the user, in order to better compare with
  SyPet-User.
  - Or trying to infer the constants from the input-output examples.
  - Or separating the sketch phase from constant search phase (similar to cegis(t))

- [ ] Note that the times for the solved benchmarks are reasonably fast,
  allowing for reasonable interaction times with the user. 
- [ ] On the other hand, we do not manage to synthesize programs with many
  lines, which means.


- [ ] FlashFill, blaze, etc

** REVIEW Concluding Remarks
*** REVIEW Related Work
*** REVIEW Future Work
*** REVIEW Conclusion
* Extended Abstract
** Structure
10 pages, references included

|---------------+---------+-----------------|
| Section       | # pages | current # pages |
|---------------+---------+-----------------|
| Abstract      |     0.5 |             0.5 |
| Intro         |       1 |               1 |
| Preliminaries |       1 |               1 |
| Background    |       2 |               2 |
| Synthesis     |       4 |             4.3 |
| Results       |       1 |               4 |
| Conclusion    |     0.5 |             1.5 |
| References    |     0.5 |               2 |
|---------------+---------+-----------------|
| Total         |    10.5 |             16.3|
|---------------+---------+-----------------|

* config :noexport:
#+TODO: TODO ONGOING REVIEW | DONE
#+COLUMNS: %36ITEM %7CONTENT %7RELWORK %7EXAMPLES
#+PROPERTY: CONTENT_ALL  TODO ONGOING REVIEW DONE
#+PROPERTY: EXAMPLES_ALL TODO ONGOING REVIEW DONE
#+PROPERTY: RELWORK_ALL  TODO ONGOING REVIEW DONE
